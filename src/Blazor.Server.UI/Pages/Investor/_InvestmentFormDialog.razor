@using CleanArchitecture.Blazor.Application.Features.Investments.Commands.AddEdit
@using CleanArchitecture.Blazor.Application.Features.KeyValues.Queries.ByName
@using CleanArchitecture.Blazor.Application.Features.Products.Commands.AddEdit
@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.Formats
@using SixLabors.ImageSharp.Processing
@inherits MudComponentBase
@inject IStringLocalizer<Investments> L
<MudDialog>
    <DialogContent>
        <MudForm Model="model" @ref="form" Validation="@(modelValidator.ValidateValue)">
            <MudGrid>
                 <MudItem xs="12">
                    <MudNumericField Label="@L["Amount"]"
                                     T="decimal"
                                     Format="N2"
                                     For="@(() => model.Amount)"
                                     Min="0.00m"
                                     @bind-Value="model.Amount" Adornment="Adornment.Start"
                                     AdornmentIcon="@Icons.Material.Filled.AttachMoney">
                                 </MudNumericField>
                </MudItem>
                <MudItem xs="12">
                    <MudSelect For="@(() => model.ProofType)" @bind-Value="@model.ProofType" Label="Proof Type" HelperText="String" Placeholder="Please Select" AdornmentIcon="@Icons.Material.Filled.EnhancedEncryption">
                        <MudSelectItem Value="@("ETH")">ETH</MudSelectItem>
                        <MudSelectItem Value="@("BTC")">BTC</MudSelectItem>
                    </MudSelect>
                </MudItem>      
                <MudItem>
                    <InputFile id="fileInput" OnChange="UploadFiles" hidden multiple accept=".jpg, .jpeg, .png" />
                    <MudFab HtmlTag="label" Size="MudBlazor.Size.Small" 
                            Color="MudBlazor.Color.Primary"
                            Icon="@Icons.Filled.Image"
                            Label="Upload proof"
                            for="fileInput" />
                    <MudText Typo="Typo.body2">@L["The recommended size for uploading images is 640X320"]</MudText>
                    <div class="d-fex">
                        @if (model.ImageDateUrl is not null)
                            foreach (var img in model.ImageDateUrl)
                            {
                                <MudImage ObjectFit="ObjectFit.Cover"   Height="160" Width="320" Src="@img" Alt="@img" Elevation="25" Class="mr-2 rounded-lg" />
                            }
                    </div>
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">@L["Cancel"]</MudButton>
        <MudButton Color="MudBlazor.Color.Primary" OnClick="Submit">@L["Ok"]</MudButton>
    </DialogActions>
</MudDialog>

@code {
    MudForm form = default!;
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = default!;
    [Inject] private IUploadService _uploadService { get; set; } = default!;
    AddEditInvestmentCommandValidator modelValidator = new AddEditInvestmentCommandValidator();
    [EditorRequired] [Parameter] public AddEditInvestmentCommand model { get; set; } = default!;

    //private IList<string>? _prictures = null;

    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        var list = new List<string>();
        foreach (var file in e.GetMultipleFiles())
        {
            var filestream = file.OpenReadStream();
            var imgstream = new MemoryStream();
            await filestream.CopyToAsync(imgstream);
            imgstream.Position = 0;
            using (var outStream = new MemoryStream())
            {
                using (var image = Image.Load(imgstream, out IImageFormat format))
                {
                    image.Mutate(
                       i => i.Resize(new ResizeOptions() { Mode = ResizeMode.Max, Size = new SixLabors.ImageSharp.Size(5000, 5000) }));
                    image.Save(outStream, format);
                    var filename = file.Name;
                    var fi = new FileInfo(filename);
                    var ext = fi.Extension;
                    var result = await _uploadService.UploadAsync(new UploadRequest()
                        {
                            Data = outStream.ToArray(),
                            FileName = Guid.NewGuid().ToString() + ext,
                            Extension = ext,
                            UploadType = UploadType.Proof
                        });
                    list.Add(result);
                }
            }
        }
        Snackbar.Add($"Upload proof successfully!", MudBlazor.Severity.Success);
        model.ImageDateUrl = list;
    }
    async Task Submit()
    {
        await form.Validate();
        if (form.IsValid)
        {
            MudDialog.Close(DialogResult.Ok(true));
        }

    }
    void Cancel() => MudDialog.Cancel();
}
